<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>unity学习笔记-YourFirstGame1</title>
    <url>/2020/06/16/unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-YourFirstGame1/</url>
    <content><![CDATA[<p><strong>简介</strong></p>
<blockquote>
<p>本文主要记载自己学习unity的过程，边看视频边写笔记,原视频为麦可老师(<a href="https://space.bilibili.com/370283072" target="_blank" rel="noopener">M_Studio</a>)在B站发的<a href="https://www.bilibili.com/video/BV1W4411Z7UC" target="_blank" rel="noopener">Unity教程 Your First Game</a></p>
</blockquote>
<p><strong><em>一､安装unity</em></strong><br>　　这个我就不多说了，官网在这，大家根据自己的需要进行下载<a href="https://unity.cn/" target="_blank" rel="noopener">unity中国官网</a></p>
<p><strong><em>二､新建项目</em></strong></p>
<p>打开unity Hub，选择项目-点击创建-输入项目名称-FirstGame</p>
<p><img src="http://s1.wailian.download/2020/06/16/FirstGame1.png" alt="FirstGame1"></p>
<p>稍等一会 进入到unity编辑页面</p>
<p><img src="http://s1.wailian.download/2020/06/16/FirstGame2.png" alt="FirstGame2"></p>
<p>窗口说明:</p>
<p>Hierarchy:代表我们所有创建的项目所生成的GameObject 默认只有一个主摄像机</p>
<p>project:存放我们资源文件的窗口</p>
<p>Scene:编辑游戏场景</p>
<p>Game:实际游戏的样子预览</p>
<p>Inspector:项目检查窗口 主要是编辑gameobject的属性</p>
<p><strong><em>三､导入素材</em></strong></p>
<p>点击asset Store 下载我们需要的素材 然后导入到unity</p>
<p><img src="http://s1.wailian.download/2020/06/16/FirstGame3.png" alt="FirstGame3"></p>
<p><img src="http://s1.wailian.download/2020/06/16/FirstGame4.png" alt="FirstGame4"></p>
<p><img src="http://s1.wailian.download/2020/06/16/FirstGame5.png" alt="FirstGame5"></p>
<p>导入之后会在project面板下面生成Sunnyland文件夹 这个文件夹就是所有的资源文件</p>
<p><img src="http://s1.wailian.download/2020/06/16/FirstGame6.png" alt="FirstGame6"></p>
<p>第一节课到这里 <a href="https://www.bilibili.com/video/BV1W4411Z7UC" target="_blank" rel="noopener">原视频地址</a></p>
]]></content>
      <categories>
        <category>c#</category>
        <category>unity</category>
      </categories>
      <tags>
        <tag>YourFirstGame</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET(C#) C#8.0中新语法&quot;is {}&quot;介绍及使用示例代码</title>
    <url>/2020/05/27/%E6%96%B0%E8%AF%AD%E6%B3%95is/</url>
    <content><![CDATA[<p><strong>简介</strong></p>
<blockquote>
<p>本文主要介绍.NET(C#)中，C# 7.0中及以is的用法和C# 8.0的is新语法:“is {}”使用介绍，以及使用示例代码。</p>
</blockquote>
<p><strong><em>一､C#7.0及之前is的使用*</em></strong><br>　　<code>is</code>操作符检查表达式的结果是否与给定类型兼容，或者(从c# 7.0开始)根据模式测试表达式。有关类型测试<code>is</code>操作符的信息，请参阅类型<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast" target="_blank" rel="noopener">测试和类型转换操作符</a>文章的<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator" target="_blank" rel="noopener">is操作符</a>部分</p>
<p><strong>1､is 模式匹配</strong></p>
<p>从C＃7.0开始，<code>is</code>和<code>switch</code>语句支持模式匹配。该<code>is</code>关键字支持以下模式：</p>
<p><strong>Type模式</strong>：它测试表达式是否可以转换为指定的类型，如果可以，则将其强制转换为该类型的变量。</p>
<p><strong>(Constant)常量模式</strong>：用于测试表达式是否求值为指定的常量值。</p>
<p><strong>var模式</strong>：匹配成功并且将表达式的值绑定到新的局部变量的匹配。</p>
<p>从C＃7.1开始，<code>expr</code>可能具有由通用类型参数及其约束定义的编译时类型。<br>如果<code>expr</code>是<code>true</code>并且<code>is</code>与<code>if</code>语句一起使用，则<code>varname</code>仅在if语句内分配。<code>varname</code>的范围是从<code>is</code>表达式到包含<code>if</code>语句的块末尾。在其他任何位置使用<code>varname</code>会导致使用尚未分配的变量时产生编译时错误。</p>
<p><strong>1) Type模式</strong></p>
<p>使用类型模式执行模式匹配时，<code>is</code>测试表达式是否可以转换为指定的类型，如果可以，将其强制转换为该类型的变量。这是对<code>is</code>语句的直接扩展，可以实现简洁的类型评估和转换。is类型模式的一般形式是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expr is type varname</span><br></pre></td></tr></table></figure>

<p>下面的示例使用is类型模式提供类型的<a href="https://docs.microsoft.com/en-us/dotnet/api/system.icomparable.compareto#System_IComparable_CompareTo_System_Object_" target="_blank" rel="noopener">IComparable.CompareTo（Object）</a>方法的实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">public class Employee : IComparable</span><br><span class="line">&#123;</span><br><span class="line">    public String Name &#123; get; set; &#125;</span><br><span class="line">    public int Id &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public int CompareTo(Object o)</span><br><span class="line">    &#123;</span><br><span class="line">        if (o is Employee e)</span><br><span class="line">        &#123;</span><br><span class="line">            return Name.CompareTo(e.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new ArgumentException(&quot;o is not an Employee object.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2) (Constant)常量模式</strong></p>
<p>使用常量模式执行模式匹配时，is测试表达式是否等于指定的常量。在C＃6和更早版本中，<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/switch" target="_blank" rel="noopener">switch</a>语句支持常量模式。从C＃7.0开始，该is语句也支持它。其语法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expr is constant</span><br></pre></td></tr></table></figure>

<p>以下示例将类型和常量模式组合在一起，以测试对象是否为Dice实例，如果是，则确定掷骰的值是否为6。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">public class Dice</span><br><span class="line">&#123;</span><br><span class="line">    Random rnd &#x3D; new Random();</span><br><span class="line">    public Dice()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public int Roll()</span><br><span class="line">    &#123;</span><br><span class="line">        return rnd.Next(1, 7); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var d1 &#x3D; new Dice();</span><br><span class="line">        ShowValue(d1);</span><br><span class="line">    &#125;</span><br><span class="line">    private static void ShowValue(object o)</span><br><span class="line">    &#123;</span><br><span class="line">        const int HIGH_ROLL &#x3D; 6;</span><br><span class="line">        if (o is Dice d &amp;&amp; d.Roll() is HIGH_ROLL)</span><br><span class="line">            Console.WriteLine($&quot;The value is &#123;HIGH_ROLL&#125;!&quot;);</span><br><span class="line">        else</span><br><span class="line">            Console.WriteLine($&quot;The dice roll is not a &#123;HIGH_ROLL&#125;!&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; The example displays output like the following:</span><br><span class="line">&#x2F;&#x2F;      The value is 6!</span><br></pre></td></tr></table></figure>

<p><code>null</code>可以使用 (Constant)常量进行检查。该语句<code>null</code>支持关键字<code>is</code>。其语法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expr is null</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        object o &#x3D; null;</span><br><span class="line">        if (o is null)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;o does not have a value&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;o is &#123;o&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int? x &#x3D; 10;</span><br><span class="line">        if (x is null)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;x does not have a value&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;x is &#123;x.Value&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; &#39;null&#39; check comparison</span><br><span class="line">        Console.WriteLine($&quot;&#39;is&#39; constant pattern &#39;null&#39; check result : &#123; o is null &#125;&quot;);</span><br><span class="line">        Console.WriteLine($&quot;object.ReferenceEquals &#39;null&#39; check result : &#123; object.ReferenceEquals(o, null) &#125;&quot;);</span><br><span class="line">        Console.WriteLine($&quot;Equality operator (&#x3D;&#x3D;) &#39;null&#39; check result : &#123; o &#x3D;&#x3D; null &#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; The example displays the following output:</span><br><span class="line">    &#x2F;&#x2F; o does not have a value</span><br><span class="line">    &#x2F;&#x2F; x is 10</span><br><span class="line">    &#x2F;&#x2F; &#39;is&#39; constant pattern &#39;null&#39; check result : True</span><br><span class="line">    &#x2F;&#x2F; object.ReferenceEquals &#39;null&#39; check result : True</span><br><span class="line">    &#x2F;&#x2F; Equality operator (&#x3D;&#x3D;) &#39;null&#39; check result : True</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3) var模式</strong></p>
<p>与var模式匹配的模式总是成功。它的语法是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expr is var varname</span><br></pre></td></tr></table></figure>

<p><code>expr</code>的值总是分配给一个名为<code>varname</code>的局部变量。<code>varname</code>是与<code>expr</code>的编译时类型相同的变量。</p>
<p>如果<code>expr</code>的计算结果为<code>null</code>，则<code>is</code>表达式生成<code>true</code>并将<code>null</code>赋值给<code>varname</code>。var模式是<code>is</code>为数不多的对空值产生<code>true</code>的用法之一。</p>
<p>你可以使用var模式在一个布尔表达式中创建一个临时变量，如下面的例子所示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        int[] testSet &#x3D; &#123; 100271, 234335, 342439, 999683 &#125;;</span><br><span class="line">        var primes &#x3D; testSet.Where(n &#x3D;&gt; Factor(n).ToList() is var factors</span><br><span class="line">                                    &amp;&amp; factors.Count &#x3D;&#x3D; 2</span><br><span class="line">                                    &amp;&amp; factors.Contains(1)</span><br><span class="line">                                    &amp;&amp; factors.Contains(n));</span><br><span class="line">        foreach (int prime in primes)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;Found prime: &#123;prime&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    static IEnumerable&lt;int&gt; Factor(int number) </span><br><span class="line">    &#123;</span><br><span class="line">        int max &#x3D; (int)Math.Sqrt(number);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; max; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            if (number % i &#x3D;&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                yield return i;</span><br><span class="line">                if (i !&#x3D; number &#x2F; i) </span><br><span class="line">                &#123;</span><br><span class="line">                    yield return number &#x2F; i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; The example displays the following output:</span><br><span class="line">&#x2F;&#x2F;       Found prime: 100271</span><br><span class="line">&#x2F;&#x2F;       Found prime: 999683</span><br></pre></td></tr></table></figure>

<p><strong>二、C# 8.0中is的新语法</strong></p>
<p><strong>属性模式</strong></p>
<p>匹配任何非<code>&quot;null&quot;</code>且属性设置为Length为2的对象，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (value is &#123; Length: 2 &#125;)</span><br><span class="line">&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现验证的示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public async Task&lt;IActionResult&gt; Update(string id, ...) </span><br><span class="line">&#123;</span><br><span class="line">    if (ValidateId(id) is &#123; &#125; invalid)</span><br><span class="line">        return invalid;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子中，<code>ValidateId()</code>可以返回<code>null</code>或<code>BadObjectRequestResult</code>的一个实例。如果返回了前者，验证就成功了，并转移到更新主体的其余部分。如果返回的是后者，则<code>is{}</code>为真(也就是说，当然<code>BadObjectRequestResult</code>的实例是一个对象)，验证失败。</p>
<p>如果使用一般写法做个判断，可能需要更多的代码，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public async Task&lt;IActionResult&gt; Update(string id, ...) </span><br><span class="line">&#123;</span><br><span class="line">    var invalid &#x3D; ValidateId(id);</span><br><span class="line">    if (invalid !&#x3D; null)</span><br><span class="line">        return invalid;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>相关文档</strong>：<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is#type-pattern" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is#type-pattern</a></p>
<p>转载自编程之路 <a href="https://www.cjavapy.com/article/615/" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>c#当实体类属性和Json字符串字段名与数据库列名不一致时获取映射列名的方法</title>
    <url>/2020/04/17/%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%98%A0%E5%B0%84%E5%88%97%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天遇到了一个很恶心的事，数据库列名都是带下划线“_”的，使用公司类库的方法取值取出来的字段都是带下划线的json，但是c#属性命名规范这么起名很糟心，于是去网上查找发现c#自带将json列名映射到属性的特性。</p>
<p>方法很简单，只需要将实体模型的属性上方增加一个特性JsonProperty</p>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 方案实体模型</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public class PlanModel</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">		&#x2F;&#x2F;&#x2F; 方案id</span><br><span class="line">		&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">		[Column(&quot;plan_id&quot;)]&#x2F;&#x2F;这个可以不加 这是EF6那种的解决方案</span><br><span class="line">		[JsonProperty(&quot;plan_id&quot;)]</span><br><span class="line">		public string PlanId &#123; get; set; &#125;</span><br><span class="line">		&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">		&#x2F;&#x2F;&#x2F; 方案名称</span><br><span class="line">		&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">		[Column(&quot;plan_name&quot;)]</span><br><span class="line">		[JsonProperty(&quot;plan_name&quot;)]</span><br><span class="line">		public string  PlanName &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure>

<p>假如你的json长这样</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"plan_id"</span>: <span class="string">"123456"</span>,</span><br><span class="line">	<span class="attr">"plan_name"</span>: <span class="string">"示例方案名称"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将你的json赋值给变量str 使用起来就是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var strModel &#x3D; JsonConvert.DeserializeObject&lt;PlanModel&gt;(str)</span><br></pre></td></tr></table></figure>

<p>然后问题又来了 我逻辑运行完的数据是赋值给了PlanId和PlanName 我想进行数据库插入怎么办呢？</p>
<p>只要这么写就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 获取实体模型属性所对应列名</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;typeparam name&#x3D;&quot;T&quot;&gt;实体模型&lt;&#x2F;typeparam&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;model&quot;&gt;实体模型&lt;&#x2F;param&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;attributeName&quot;&gt;当前属性名&lt;&#x2F;param&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">public static string GetMappingDemo&lt;T&gt;(T model, string attributeName)</span><br><span class="line">&#123;</span><br><span class="line">	try</span><br><span class="line">	&#123;</span><br><span class="line">		var attributeMappingName &#x3D; model.GetType()?.GetProperty(attributeName)?.CustomAttributes?.FirstOrDefault(c &#x3D;&gt; c.AttributeType.Name &#x3D;&#x3D; &quot;ColumnAttribute&quot;)?.ConstructorArguments?.FirstOrDefault().Value?.ToString();</span><br><span class="line">		return string.IsNullOrEmpty(attributeMappingName) ? attributeName : attributeMappingName;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		return attributeName;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetMappingDemo(new PlanModel(), &quot;PlanId&quot;);</span><br></pre></td></tr></table></figure>

<p>这样就把映射的列名取出来了，然后怎么玩就看你们的了，我们是定义了一种类似于Dictionary的类型，然后直接重命名key就ok了</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)正向代理与反向代理的区别</title>
    <url>/2020/03/25/(%E8%BD%AC%E8%BD%BD)%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p>之前对正向代理和反向代理的概念一直模棱两可，虽然会用，但是说不清道不明的，今天偶然在简书上看见了这篇文章，感觉总结的相当到位，就转载过来，好记性不如烂笔头嘛</p>
</blockquote>
<p><strong>1. 概念</strong><br>　　正向代理是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p>
<p>  反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</p>
<p><strong>2. 区别</strong><br>　　正向代理需要你主动设置代理服务器ip或者域名进行访问，由设置的服务器ip或者域名去获取访问内容并返回；而反向代理不需要你做任何设置，直接访问服务器真实ip或者域名，但是服务器内部会自动根据访问内容进行跳转及内容返回，你不知道它最终访问的是哪些机器。</p>
<p>  正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；而反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。</p>
<p>  从上面的描述也能看得出来正向代理和反向代理最关键的两点区别：</p>
<ul>
<li><p>是否指定目标服务器</p>
</li>
<li><p>客户端是否要做设置</p>
</li>
</ul>
<p>  下面用一张图来表示两者的差异：</p>
<p><img src="http://s1.wailian.download/2020/03/25/da57cf56dc1447de89985920ba2d075e.png" alt="正向代理与反向代理"></p>
<p>​        正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。</p>
<p>从用途上来区分：</p>
<ul>
<li>正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率</li>
<li>反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能</li>
</ul>
<p>从安全性来讲：</p>
<ul>
<li>正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务</li>
<li>反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器</li>
</ul>
<p><strong>3. 使用场景</strong></p>
<p>​        正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将 防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。</p>
<h5 id="3-1-正向代理"><a href="#3-1-正向代理" class="headerlink" title="3.1 正向代理"></a>3.1 正向代理</h5><p>​        从上面的介绍也就可以猜出来正向代理的至少一个功能（俗称翻墙），也即：</p>
<p>  用户A无法访问facebook，但是能访问服务器B，而服务器B可以访问facebook。于是用户A访问服务器B，通过服务器B去访问facebook，，服务器B收到请求后，去访问facebook，facebook把响应信息返回给服务器B，服务器B再把响应信息返回给A。这样，通过代理服务器B，就实现了翻墙。</p>
<h5 id="3-2-反向代理"><a href="#3-2-反向代理" class="headerlink" title="3.2 反向代理"></a>3.2 反向代理</h5><p>从上面的介绍也可以猜出来反向代理的至少一个功能（比如负载均衡），也即：</p>
<p>  假设用户A访问 <strong><a href="http://www.somesite.com/something.html" target="_blank" rel="noopener">http://www.somesite.com/something.html</a></strong>，但<a href="http://www.somesite.com" target="_blank" rel="noopener">www.somesite.com</a>上并不存在something.html页面，于是接收用户请求的该服务器就偷偷从另外一台服务器上取回来，然后返回给用户，而用户并不知道something.html页面究竟位于哪台机器上。</p>
<p>  反向代理的作用就比较多了，这里简单列举一下：</p>
<ul>
<li>保护和隐藏原始资源服务器</li>
<li>加密和SSL加速</li>
<li>负载均衡</li>
<li>缓存静态内容</li>
<li>压缩</li>
<li>减速上传</li>
<li>安全</li>
<li>外网发布</li>
</ul>
<p>下面做两个简单介绍</p>
<h4 id="保护和隐藏原始资源服务器"><a href="#保护和隐藏原始资源服务器" class="headerlink" title="保护和隐藏原始资源服务器"></a>保护和隐藏原始资源服务器</h4><p><img src="http://s1.wailian.download/2020/03/25/782a69e64d78a772d441c6ec794ded0b.png" alt="保护和隐藏资源服务器"></p>
<p>用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。</p>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p><img src="http://s1.wailian.download/2020/03/25/db884a23908ddceb397b527cfb2d0d0b.png" alt="负载均衡"></p>
<p>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</p>
<h5 id="3-3-透明代理"><a href="#3-3-透明代理" class="headerlink" title="3.3 透明代理"></a>3.3 透明代理</h5><p>透明代理比较类似正向代理的功能，差别在于客户端根本不知道代理的存在，它改编你的request，并会传送真实IP（使用场景就是公司限制网络的访问）。</p>
<p>  比如为了工作效率或者安全，A公司屏蔽了QQ软件的使用。A公司的员工接上了网络，但发现无法使用qq。这就是透明代理捣的鬼。公司在内网和外网的中间插入一个透明代理，这个代理会根据规则抓取请求内容，遇到qq的请求我就把这个请求给屏蔽掉，这样就完成了透明屏蔽。当然了，如果你明白原理，就可以自己搞个正向代理来绕过公司的屏蔽。</p>
<blockquote>
<p>以上是第一篇比较学术型的解释，接下来是比较浅显易懂的，转自<a href="http://mp.weixin.qq.com/s/ikrI3rmSYs83wdSWqq2QIg" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/ikrI3rmSYs83wdSWqq2QIg</a></p>
</blockquote>
<p>Nginx作为时下最流行的HTTP服务器之一，同时它是一个反向代理服务器，提到反向代理服务器，有同学可能觉得这个概念很模糊，如果说到代理，他可能明白，但是再引出一个正向代理，估计懵了，笔者将尝试用浅显易懂的比方把这两个概念解释清楚</p>
<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p>A同学在大众创业、万众创新的大时代背景下开启他的创业之路，目前他遇到的最大的一个问题就是启动资金，于是他决定去找马云爸爸借钱，可想而知，最后碰一鼻子灰回来了，情急之下，他想到一个办法，找关系开后门，经过一番消息打探，原来A同学的大学老师王老师是马云的同学，于是A同学找到王老师，托王老师帮忙去马云那借500万过来，当然最后事成了。不过马云并不知道这钱是A同学借的，马云是借给王老师的，最后由王老师转交给A同学。这里的王老师在这个过程中扮演了一个非常关键的角色，就是代理，也可以说是正向代理，王老师代替A同学办这件事，这个过程中，真正借钱的人是谁，马云是不知道的，这点非常关键。</p>
<p>  我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，知名的科学上网工具shadowsocks 扮演的就是典型的正向代理角色。在天朝用浏览器访问 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 时，被残忍的拒绝了，于是你可以在国外搭建一台代理服务器，让代理帮我去请求<a href="http://google.com" target="_blank" rel="noopener">google.com</a>，代理把请求返回的相应结构再返回给我。</p>
<p><img src="http://s1.wailian.download/2020/03/25/e2492af6ee747e57e8fdcac5107d9ee4.png" alt="正向代理"></p>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>大家都有过这样的经历，拨打10086客服电话，可能一个地区的10086客服有几个或者几十个，你永远都不需要关心在电话那头的是哪一个，叫什么，男的，还是女的，漂亮的还是帅气的，你都不关心，你关心的是你的问题能不能得到专业的解答，你只需要拨通了10086的总机号码，电话那头总会有人会回答你，只是有时慢有时快而已。那么这里的10086总机号码就是我们说的反向代理。客户不知道真正提供服务人的是谁。</p>
<p>  反向代理隐藏了真实的服务端，当我们请求 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p>
<p><img src="http://s1.wailian.download/2020/03/25/af8af2497a850019af89f4b52783f5fd.png" alt="反向代理"></p>
<p>两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端</p>
<p>转载自简书 <a href="https://www.jianshu.com/p/208c02c9dd1d" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>转载 - 代理</tag>
      </tags>
  </entry>
  <entry>
    <title>将Hexo博客部署到新版coding上</title>
    <url>/2020/03/17/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%96%B0%E7%89%88coding%E4%B8%8A/</url>
    <content><![CDATA[<p>其实一开始我是把博客部署到github上的，但是国内最近访问简直慢得令人发指，然后我就寻找方法，发现了coding也支持hexo部署，在此感谢<a href="https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/" target="_blank" rel="noopener">TRHX</a>大佬的博客启发。</p>
<p>部署到coding之前请先保证你已经安装了hexo框架,我是直接安装到我本地的，不知道怎么安装的请先移至<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a></p>
<p>首先登录到<a href="https://coding.net/" target="_blank" rel="noopener">coding官网</a> 在我的项目里面选择新建项目</p>
<p><img src="http://s1.wailian.download/2020/03/19/coding.png" alt="新建项目"></p>
<p>这里选择的模板一定要是第三个 开始我就选了第一个 怎么找也没找到静态网页的功能</p>
<p><img src="http://s1.wailian.download/2020/03/19/27666573d563770e7.png" alt="选择新建devops项目"></p>
<p>填写项目名称完成创建</p>
<p><img src="http://s1.wailian.download/2020/03/19/3d04dacbc584260c6.png" alt="完成创建"></p>
<p>创建成功之后应该会看到如下界面 复制你的上传项目地址</p>
<p><img src="http://s1.wailian.download/2020/03/19/6.png" alt="网站上传地址"></p>
<p>修改hexo的_config.yml文件 在deploy下面的repo节点下新增coding 粘贴你的地址</p>
<p><img src="http://s1.wailian.download/2020/03/19/7.png" alt="修改hexo配置文件"></p>
<p>保存好配置文件之后 进入到博客所在文件夹打开powershell 输入命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g <span class="literal">-d</span></span><br></pre></td></tr></table></figure>

<p><img src="http://s1.wailian.download/2020/03/19/8.png" alt="运行hexo命令"></p>
<p>不出意外的话回到coding就可以看到你推送过来的文件了 和github一样</p>
<p><img src="http://s1.wailian.download/2020/03/19/9.png" alt="推送日志"></p>
<p>进入到项目设置 选择静态网站 如果没有实名认证需要先进行一下实名认证</p>
<p><img src="http://s1.wailian.download/2020/03/19/10.png" alt="选择静态网站"></p>
<p>输入你的网站名称 选择刚才创建好的项目 触发机制选择自动部署 勾选代码更新时自动部署 或者按照你的爱好来就行</p>
<p><img src="http://s1.wailian.download/2020/03/19/11.png" alt="新建静态网站"></p>
<p>保存之后点击立即部署</p>
<p><img src="http://s1.wailian.download/2020/03/19/12.png" alt="立即部署"></p>
<p>大功告成,赶紧点击上图的连接看看你的博客吧</p>
<p><img src="http://s1.wailian.download/2020/03/19/13.png" alt="完成"></p>
<p>(ps:如果你有域名的话直接使用cname解析到这个地址就好了)</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)nssm 在windows上部署服务 感觉比winsw好用？</title>
    <url>/2020/03/13/(%E8%BD%AC%E8%BD%BD)nssm%20%E5%9C%A8windows%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%20%E6%84%9F%E8%A7%89%E6%AF%94winsw%E5%A5%BD%E7%94%A8/</url>
    <content><![CDATA[<p><strong>简介</strong><br>　　<a href="http://www.nssm.cc/" target="_blank" rel="noopener">NSSM</a>是一款可将Nodejs项目注册为Windows系统服务的工具。当你的Node.js项目需要部署在Windows Server上时，NSSM是一个不错的选择。</p>
<p><strong>特点</strong><br>　　NSSM将Node.js项目注册为服务后，启动、停止、重启皆由windows来管理，所以我们不必担心NSSM无法处理项目因意外的停止，而Windows的服务管理即可处理这些问题。</p>
<p><strong>使用</strong><br>1.下载NSSM       [download][<a href="http://www.nssm.cc/release/nssm-2.24.zip]" target="_blank" rel="noopener">http://www.nssm.cc/release/nssm-2.24.zip]</a>.<br>2.根据自己的平台，将32/64位nssm.exe文件解压至任意文件夹。<br>3.cmd定位至nssm.exe所在目录。<br>4.输入 nssm install {服务名称}，即注册服务的名称。注册服务弹出如下NSSM界面。<img src="http://s1.wailian.download/2020/03/13/1.png" alt="enter description here"><img src="http://s1.wailian.download/2020/03/13/3.png" alt="enter description here"><br>5.Application标签设置：</p>
<p>Application Path: 选择系统安装的node.exe。<br>Startup directory: 选择nodejs项目的根目录。<br>Arguments: 输入启动参数，如默认的express项目的参数为./bin/www<br>6.上述步骤操作完成，即可点击Install service来注册服务。我们在系统的服务中即可找到刚刚注册的服务。<br>7.在系统服务中找到刚刚注册的服务，右键属性 - 恢复即可设置此服务挂掉重启等内容。</p>
<p>nssm常用命令：</p>
<p>nssm install servername //创建servername服务<br>nssm start servername //启动服务<br>nssm stop servername //暂停服务<br>nssm restart servername //重新启动服务<br>nssm remove servername //删除创建的servername服务</p>
<p>转载自博客园 <a href="https://www.cnblogs.com/hai-cheng/p/8670395.html" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CCProxy无法绕过深信服 教你使用Shadowsocks（纸飞机）和Proxifier绕过限制</title>
    <url>/2020/03/09/%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Shadowsocks%EF%BC%88%E7%BA%B8%E9%A3%9E%E6%9C%BA%EF%BC%89%E5%92%8CProxifier%E7%BB%95%E8%BF%87%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>我们公司弄了个深信服的软件限制我们上网，这其实是好事，防止我们上班摸鱼，但是为什么要限制微信啊，客户对接都是用微信办公，用手机聊天还会被摄像头拍到，没办法，只能曲线救国自己想办法了<br>开始我是用CCProxy将我自己的服务器设置为了代理服务器，经过测试我的ip地址却是变成了服务器地址，但是应用程序还是无法上网，我又使用Proxifier将应用程序的联网也走CCProxy的网络连接还是不行，猜测可能是到路由器那就被打回了，突然想起用过ssr去谷歌求识的经历，然后测试ssr真的可以</p>
<blockquote>
<p>首先你需要有ShadowsocksR连接</p>
</blockquote>
<p> 我这里自己搭建一个<br> 搭建教程地址<a href="https://www.nbmao.com/archives/2905" target="_blank" rel="noopener">Windows Server 上搭建 ShadowsocksR 服务端</a></p>
<p> 搭建完成之后启动ShadowsocksR-dotnet4.0.exe，启动完毕之后右下角会有个小飞机的图标，双击打开填写服务器配置文件config.json的配置，保持一致就可以了，然后右键小飞机–系统代理模式改为全局模式(如果只是想单独某个软件使用代理的话测试成功之后可以用直连模式)，代理规则–绕过局域网或者全局，然后查一下你的ip变没变，如果变成了服务器的ip那就证明你成功了<br> <img src="http://s1.wailian.download/2020/03/09/87cdd1a933f7f130982070d6bdd5c208.png" alt="enter description here"><br>这里应该是你本地电脑连接服务器的端口，我没测试是不是,懒得改，如果是的话Proxifier就用这个端口连接(这里的文件名有误 配置文件应该是user-config.json)<br> <img src="http://s1.wailian.download/2020/03/09/7c728d3a16c1c825512091dc3e3d4eb0.png" alt="enter description here"></p>
<blockquote>
<p>然后打开Proxifier客户端</p>
</blockquote>
<p> 配置文件–代理服务器–添加你本地的ip（因为你使用ShadowsocksR-dotnet4.0已经将本地走服务器环境了）,那就是127.0.0.1,,端口号就是上面配置文件的（应该是）1080，选择socks version 5 点击确定<br> <img src="http://s1.wailian.download/2020/03/09/_20200309101506.png" alt="enter description here"></p>
<blockquote>
<p>这时候因为两个软件有冲突，所以需要将ShadowsocksR-dotnet4.0.exe设置为不需要Proxifier代理</p>
</blockquote>
<p>点击配置文件–代理规则–添加 应用程序选ShadowsocksR-dotnet4.0.exe动作选Direct<br><img src="http://s1.wailian.download/2020/03/09/ce3689fd70239662df9e92bb6e55b8f3.png" alt="enter description here"><br>点击确定，再添加一个任意<br>动作选proxy sock5 127.0.0.1<br><img src="http://s1.wailian.download/2020/03/09/14300f057daf23baa.png" alt="enter description here"><br>大功告成 开始愉快的上网吧！(ps:如果软件本身支持代理方式联网的话可以不用Proxifier，例如微信，直接开启ShadowsocksR-dotnet4.0.exe 然后填写地址127.0.0.1和端口1080就可以上网了)</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网络</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>我对抽象类的理解</title>
    <url>/2020/01/09/%E6%88%91%E5%AF%B9%E6%8A%BD%E8%B1%A1%E7%B1%BB(abstract%20)%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>看了一下现在项目的代码，我真心觉得所有业务代码都是在制造垃圾，也不知道是心血来潮还是怎么样，我觉得自己不能再这么下去了，就想想办法改变一下自己写代码的方式，首先接触到的就是一个我听说了很久但是一直没有搞明白，也一直没有用过的的概念——抽象类</p>
<blockquote>
<p>什么是抽象类</p>
</blockquote>
<p>先来一个官方一点的解释：<br>abstract关键字修饰的类称为抽象类，抽象类不能被实例化，抽象类是派生类的基类。<br>关键字：abstract<br>语法：<br>abstract class 类名<br>{<br>…………<br>}<br>1、一个抽象类可以同时包含抽象方法和非抽象方法。<br>2、抽象方法只在派生类中真正实现，这表明抽象方法只存放函数原型，不涉及主体代码，<br>3、派生自抽象类的类需要实现其基类的抽象方法，才能实例化对象。<br>4、使用override关键子可在派生类中实现抽象方法，经override声明重写的方法称为重写基类方法，其签名必须与override方法的签名相同。</p>
<p>==<strong>说实话我觉得只知道概念真心没什么用啊！！！根本不知道怎么用，也不知道什么时候用</strong> #2196F3==</p>
<p>让我理解的话大概就是:<strong>同样</strong>类型的对象需要做<strong>不同样</strong>的操作实现<strong>同样</strong>的目的</p>
<p>可能这么说也不是很明白，那就举个例子说一下:比如说我想开个水果店，我需要进货和卖货，假设我只卖苹果和香蕉，那么我需要这么写</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FruitShop</span><span class="comment">//开一家水果店</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuyFruit</span>(<span class="params"></span>)</span>;<span class="comment">//进水果</span></span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SellFruit</span>(<span class="params"></span>)</span>;<span class="comment">//卖水果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为我进水果的方式不一样,我苹果是论斤进的，但是香蕉是论根进的，苹果是按斤卖的，香蕉是按根卖的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对苹果的操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Apple</span>:<span class="title">FruitShop</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">override</span>  <span class="keyword">void</span> <span class="title">BuyFruit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">//这里写怎么论斤进苹果 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">override</span>  <span class="keyword">void</span> <span class="title">SellFruit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">//这里写怎么论斤卖苹果 </span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对香蕉的操作类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Banana</span>:<span class="title">FruitShop</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">override</span>  <span class="keyword">void</span> <span class="title">BuyFruit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">//这里写怎么论根进香蕉 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">override</span>  <span class="keyword">void</span> <span class="title">SellFruit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">//这里写怎么论根卖香蕉 </span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以大概可能就是这么用的吧</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>C#PDF转图片</title>
    <url>/2019/11/27/PDF%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>做为一个小白程序员，没想到我曾经在博客园上写的东西也能够帮助到别人，这对于我来说还是挺开心的，所以我觉得把那篇文章copy一下，在自己的博客上再发一遍，没准能帮助到更多的人，嘿嘿！</p>
<blockquote>
<p>接下来进入到正文</p>
</blockquote>
<p>转换有两种方法：</p>
<p>第一种是用O2S.Components.PDFRender4NET 大家可以去网上查找无水印版本 但是有的时候带颜色的字就变空白了 不知道为什么</p>
<p>第二种是用PdfiumViewer 这种方法带颜色的字也可以转换 推荐使用</p>
<p>下面贴代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PDFHelp</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将PDF文档转换为图片的方法一</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pdfInputPath"&gt;</span>PDF文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="imageOutputPath"&gt;</span>图片输出路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="imageName"&gt;</span>生成图片的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startPageNum"&gt;</span>从PDF文档的第几页开始转换<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="endPageNum"&gt;</span>从PDF文档的第几页开始停止转换<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="imageFormat"&gt;</span>设置所需图片格式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="definition"&gt;</span>设置图片的清晰度，数字越大越清晰<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConvertPDF2Image</span>(<span class="params"><span class="keyword">string</span> pdfInputPath, <span class="keyword">string</span> imageOutputPath,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">string</span> imageName, <span class="keyword">int</span> startPageNum, <span class="keyword">int</span> endPageNum, ImageFormat imageFormat, <span class="keyword">int</span> definition</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            PDFFile pdfFile = PDFFile.Open(pdfInputPath);</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(imageOutputPath))</span><br><span class="line">            &#123;</span><br><span class="line">                Directory.CreateDirectory(imageOutputPath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// validate pageNum</span></span><br><span class="line">            <span class="keyword">if</span> (startPageNum &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                startPageNum = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (endPageNum &gt; pdfFile.PageCount)</span><br><span class="line">            &#123;</span><br><span class="line">                endPageNum = pdfFile.PageCount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (startPageNum &gt; endPageNum)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tempPageNum = startPageNum;</span><br><span class="line">                startPageNum = endPageNum;</span><br><span class="line">                endPageNum = startPageNum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// start to convert each page</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = startPageNum; i &lt;= endPageNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Bitmap pageImage = pdfFile.GetPageImage(i - <span class="number">1</span>, <span class="number">56</span> * (<span class="keyword">int</span>)definition);</span><br><span class="line">                pageImage.Save(imageOutputPath + imageName + i.ToString() + <span class="string">"."</span> + imageFormat.ToString(), imageFormat);</span><br><span class="line">                pageImage.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            pdfFile.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将PDF转换为图片方法二</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pdfPath"&gt;</span>pdf文件位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageNumber"&gt;</span>pdf文件张数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="size"&gt;</span>pdf文件尺寸<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="outputPath"&gt;</span>输出图片位置与名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RenderPage</span>(<span class="params"><span class="keyword">string</span> pdfPath, <span class="keyword">int</span> pageNumber, System.Drawing.Size size, <span class="keyword">string</span> outputPath, <span class="keyword">int</span> dpi = <span class="number">300</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 调用方法</span></span><br><span class="line">            <span class="comment">//转一页的话直接调用RenderPage</span></span><br><span class="line">            <span class="comment">//转整个文档调用</span></span><br><span class="line">            <span class="comment">//var pdf = PdfDocument.Load(@"d://20190514174209.pdf");</span></span><br><span class="line">            <span class="comment">//var pdfpage = pdf.PageCount;</span></span><br><span class="line">            <span class="comment">//var pagesizes = pdf.PageSizes;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//for (int i = 1; i &lt;= pdfpage; i++)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Size size = new Size();</span></span><br><span class="line">            <span class="comment">//    size.Height = (int)pagesizes[(i - 1)].Height + 265;</span></span><br><span class="line">            <span class="comment">//    size.Width = (int)pagesizes[(i - 1)].Width + 405;</span></span><br><span class="line">            <span class="comment">//    PDFHelp.RenderPage(@"d://20190514174209.pdf", i, size, @"d://" + i + @".jpg");</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> document = PdfiumViewer.PdfDocument.Load(pdfPath))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(outputPath, FileMode.Create))</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> image = GetPageImage(pageNumber, size, document, dpi))</span><br><span class="line">            &#123;</span><br><span class="line">                image.Save(stream, ImageFormat.Jpeg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Image <span class="title">GetPageImage</span>(<span class="params"><span class="keyword">int</span> pageNumber, Size size, PdfiumViewer.PdfDocument document, <span class="keyword">int</span> dpi</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> document.Render(pageNumber - <span class="number">1</span>, size.Width, size.Height, dpi, dpi, PdfRenderFlags.Annotations);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第二种方法的dll在nuget就可以下载 nuget安装dll</p>
<p>Install-Package PdfiumViewer -Version 2.13.0</p>
<p>Install-Package ImageResizer.Plugins.PdfiumRenderer.Pdfium.Dll -Version 1.0.1</p>
<p>第二种方法源码下载:<a href="https://github.com/hopehero/PDFTest" target="_blank" rel="noopener">PDFTest</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>c#</tag>
      </tags>
  </entry>
</search>
